(function() {
  var self = this;
  var reporter = window.ZendeskReporter ? new window.ZendeskReporter() : {};

  // This is just defining a wrapped version of jQuery which simply makes a
  // pass through call to global window.jQuery and adds logging information
  // about the origin of the page to Datadog.
  function wrapped$() {
    reporter.increment && reporter.increment(
      'app_framework.app_scope.violated',
      1,
      ['origin:' + self.location.hostname]
    );
    return self.$.apply(null, arguments);
  }

  // Adding the wrapped version of jQeury to a clone of window object, which
  // will be used to bind the app's scope.
  var wrappedWindow = this.$.extend(true, {}, self, { $: wrapped$ });
  wrappedWindow.window = wrappedWindow;
  wrappedWindow.top = wrappedWindow;

  <% appsjs.each do |appjs| %>
    <% if apps_zaf_naughty_v1_logging %>
      // Trying to match a v1 apps self executing function here and bind it to the
      // wrappedWindow instance defined above.
      // }()); ==> }.bind(wrappedWindow)());
      <%= appjs.gsub(
        /}\(\)\)\;*\s*;*\s*}\s*var\s*app\s*=\s*ZendeskApps\.defineApp\(source\)/mx,
        "}.bind(wrappedWindow)());\n;\n}\n\nvar app = ZendeskApps.defineApp(source)"
      ) %>
    <% else %>
      <%= appjs %>
    <% end %>
  <% end %>

  <% installations.each do |installation| %>
    if (ZendeskApps[<%= installation.app_name.to_json %>]) {
      ZendeskApps[<%= installation.app_name.to_json %>].install(<%= installation.to_json %>);
    }
  <% end %>

  <% installation_orders.each do |loc_name, installation_list| %>
    ZendeskApps.sortAppsForSite(<%= loc_name.to_json %>, <%= installation_list.to_json %>);
  <% end %>
}());

<% unless rollbar_zaf_access_token.empty? %>
ZendeskApps.rollbarAccessToken = "<%= rollbar_zaf_access_token %>";
<% end %>

ZendeskApps.trigger && ZendeskApps.trigger('ready');
